name: CI/CD using github actions & docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3

    - name: Build Backend with Gradle
      run: ./gradlew build
      working-directory: ./backend

    # Backend Docker build & Push
    - name: Docker build & push - Backend
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/backend-app ./backend
        docker push ${{ secrets.DOCKER_USERNAME }}/backend-app

    # Frontend Docker build & Push
    - name: Docker build & push - Frontend
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend-app ./frontend
        docker push ${{ secrets.DOCKER_USERNAME }}/frontend-app

    # EC2 배포
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          # Stop all running containers
          sudo docker stop $(sudo docker ps -q) || true

          # Pull latest images
          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/backend-app:latest
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/frontend-app:latest

          # Run containers (customize as needed)
          sudo docker run -d --name backend -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/backend-app:latest
          sudo docker run -d --name frontend -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/frontend-app:latest

          # Cleanup
          sudo docker container prune -f
          sudo docker image prune -a -f
