name: CI/CD using GitHub Actions & Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    # ===============================
    # 1. BACKEND - Spring Boot Build
    # ===============================
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: ⚙️ Setup Gradle
      uses: gradle/actions/setup-gradle@v3

    - name: 🔨 Build Spring Boot app
      working-directory: backend/demo
      run: ./gradlew build

    - name: 🐳 Docker build & push (backend)
      run: |
        set -e
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/backend-app:latest ./backend/demo
        docker push ${{ secrets.DOCKER_USERNAME }}/backend-app:latest

    # ===============================
    # 2. FRONTEND - Next.js Build
    # ===============================
    - name: 🟦 Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: 🧹 Clean npm cache
      working-directory: frontend/app
      run: npm cache clean --force

    - name: 🌐 Set npm registry
      working-directory: frontend/app
      run: npm config set registry https://registry.npmjs.org/

    - name: 📦 Install dependencies
      working-directory: frontend/app
      run: npm install

    - name: 🏗️ Build Next.js app
      working-directory: frontend/app
      run: npm run build

    - name: 🐳 Docker build & push (frontend)
      run: |
        set -e
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend-app:latest ./frontend/app
        docker push ${{ secrets.DOCKER_USERNAME }}/frontend-app:latest

    # ===============================
    # 3. DEPLOY TO EC2
    # ===============================
    - name: 🚀 Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          set -e
          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

          # 백엔드: 기존 포트 8080 사용 컨테이너 강제 제거
          BACKEND_PORT=8080
          CONFLICTING_BACKEND=$(sudo lsof -ti tcp:$BACKEND_PORT || true)
          if [ -n "$CONFLICTING_BACKEND" ]; then
            echo "⚠️ Port $BACKEND_PORT already in use. Stopping process: $CONFLICTING_BACKEND"
            sudo kill -9 $CONFLICTING_BACKEND
          fi

          # Backend
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/backend-app:latest
          sudo docker stop backend-container || true
          sudo docker rm backend-container || true
          sudo docker run -d --name backend-container -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/backend-app:latest

          # Frontend
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/frontend-app:latest
          sudo docker stop frontend-container || true
          sudo docker rm frontend-container || true
          sudo docker run -d --name frontend-container -p 80:3000 ${{ secrets.DOCKER_USERNAME }}/frontend-app:latest

          # Clean up unused images
          sudo docker image prune -a -f
